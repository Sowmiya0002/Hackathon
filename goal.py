import streamlit as st
import google.generativeai as genai
import pandas as pd
import numpy as np

# Configure the API key
genai.configure(api_key="AIzaSyC4eMIa_ZUz0tfUbJ18RmTXjbNpAysflvM")

st.title("Financial Goal Planner")
st.write("Welcome to the Financial Goal Planner. Please input your details to get a personalized savings plan.")

# Input fields
col1, col2 = st.columns(2)
with col1:
    goal = st.selectbox("Select your financial goal:", ["Retirement Planning", "Saving for a House", "Saving for a Car", "Gold Savings", "Marriage Saving", "Other"])
    if goal == "Other":
        custom_goal = st.text_input("Please specify your goal:")
    else:
        custom_goal = goal
    age = st.number_input("Your age:", min_value=18, max_value=100, value=30)
with col2:
    target_amount = st.number_input("Target amount for your goal:", min_value=0.0, value=100000.0, step=1000.0)
    time_frame = st.slider("Time frame to achieve the goal (years):", min_value=1, max_value=50, value=10)
    monthly_savings = st.number_input("How much can you save per month:", min_value=0.0, value=1000.0, step=100.0)

if st.button("Generate Plan"):
    # Craft the prompt
    prompt = f"""You are a financial planner. The user has the following goal: {custom_goal}. They are {age} years old, can save {monthly_savings} per month for {time_frame} years to achieve a target of {target_amount}. Please provide:

1. A tailored savings plan, including whether the current savings are sufficient or how much more is needed.
2. Investment suggestions to reach the goal.
3. A budget breakdown if applicable.
4. Explain why this plan is suitable for the user's situation.
5. Provide alternative plans or additional investment suggestions for better returns or risk management.

Please be detailed and provide specific numbers where possible."""

    try:
        # Generate the response
        model = genai.GenerativeModel('gemini-2.0-flash')
        response = model.generate_content(prompt)
        st.subheader("Your Personalized Savings Plan")
        st.write(response.text)

        # Generate a simple savings growth chart
        st.subheader("Savings Growth Over Time")
        interest_rate = 0.05  # Assuming 5% annual interest
        months = time_frame * 12
        future_value = 0
        savings_over_time = []
        for month in range(1, months + 1):
            future_value = future_value * (1 + interest_rate / 12) + monthly_savings
            if month % 12 == 0:
                savings_over_time.append(future_value)
        years = list(range(1, time_frame + 1))
        df = pd.DataFrame({"Year": years, "Savings": savings_over_time})
        st.line_chart(df.set_index("Year"))
        st.write("**Note:** The savings growth chart assumes a constant annual interest rate of 5% compounded monthly. Actual returns may vary based on investment choices.")
    except Exception as e:
        st.error(f"An error occurred: {e}")

st.write("**Disclaimer:** The suggestions provided are generated by an AI model and should not be considered as professional financial advice. Please consult with a qualified financial advisor before making any investment decisions.")
